diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index fd965db6063..375b0faef85 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -30,7 +30,11 @@ import org.apache.flink.util.TimeUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.time.Duration;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -62,11 +66,11 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
 	private static final byte TYPE_FLOAT = 4;
 	private static final byte TYPE_DOUBLE = 5;
 	private static final byte TYPE_BYTES = 6;
+	private static boolean isFirstThread = true;
 
 	/** The log object used for debugging. */
 	private static final Logger LOG = LoggerFactory.getLogger(Configuration.class);
 
-
 	/** Stores the concrete key/value pairs of this configuration object. */
 	protected final HashMap<String, Object> confData;
 
@@ -77,6 +81,75 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
 	 */
 	public Configuration() {
 		this.confData = new HashMap<>();
+		if (isFirstThreadAndFlip()) {
+			ctestInject();
+		}
+	}
+
+	// Ctest
+	private synchronized boolean isFirstThreadAndFlip() {
+		boolean tmp = isFirstThread;
+		isFirstThread = false;
+		return tmp;
+	}
+
+	// Ctest
+	private void ctestInject() {
+		String f = System.getProperty("user.dir") + "/core-ctest.yaml";
+		final File file = new File(f);
+		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))) {
+
+			String line;
+			int lineNo = 0;
+			while ((line = reader.readLine()) != null) {
+				System.out.println(line);
+				lineNo++;
+				// 1. check for comments
+				String[] comments = line.split("#", 2);
+				String conf = comments[0].trim();
+
+				// 2. get key and value
+				if (conf.length() > 0) {
+					String[] kv = conf.split(": ", 2);
+
+					// skip line with no valid key-value pair
+					if (kv.length == 1) {
+						LOG.warn(
+								"Error while trying to split key and value in configuration file "
+										+ file
+										+ ":"
+										+ lineNo
+										+ ": \""
+										+ line
+										+ "\"");
+						continue;
+					}
+
+					String key = kv[0].trim();
+					String value = kv[1].trim();
+
+					// sanity check
+					if (key.length() == 0 || value.length() == 0) {
+						LOG.warn(
+								"Error after splitting key and value in configuration file "
+										+ file
+										+ ":"
+										+ lineNo
+										+ ": \""
+										+ line
+										+ "\"");
+						continue;
+					}
+
+					setString(key, value);
+					System.out.println("LOADING:");
+					System.out.println(key);
+					System.out.println(value);
+				}
+			}
+		} catch (IOException e) {
+			throw new RuntimeException("Error parsing YAML configuration.", e);
+		}
 	}
 
 	/**
diff --git a/flink-core/src/main/java/org/apache/flink/configuration/GlobalConfiguration.java b/flink-core/src/main/java/org/apache/flink/configuration/GlobalConfiguration.java
index 0a65fe852f8..47e9f3f0211 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/GlobalConfiguration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/GlobalConfiguration.java
@@ -41,7 +41,7 @@ public final class GlobalConfiguration {
 
 	private static final Logger LOG = LoggerFactory.getLogger(GlobalConfiguration.class);
 
-	public static final String FLINK_CONF_FILENAME = "flink-conf.yaml";
+	public static final String FLINK_CONF_FILENAME = "core-ctest.yaml"; // ctest
 
 	// the keys whose values should be hidden
 	private static final String[] SENSITIVE_KEYS = new String[] {"password", "secret", "fs.azure.account.key"};
@@ -74,7 +74,8 @@ public final class GlobalConfiguration {
 	 * @return Returns the loaded global configuration with dynamic properties
 	 */
 	public static Configuration loadConfiguration(Configuration dynamicProperties) {
-		final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR);
+		// final String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR);
+		final String configDir = System.getProperty("user.dir"); // ctest
 		if (configDir == null) {
 			return new Configuration(dynamicProperties);
 		}
